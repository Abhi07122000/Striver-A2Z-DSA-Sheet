1.
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int first = 0;
        int second = first + 1;
        while (first < second) {
            if(nums[first] + nums[second] == target) {
                return new int[] {first, second};
            }else if(second == nums.length - 1) {
                first++;
                second = first+1;
            }else {
                second++;
            }
        }
        return new int[] {-1,-1};
    }
}

2.
3.
class Solution {
    public int longestConsecutive(int[] nums) {
        HashSet<Integer> hashSet = new HashSet<>();
        for(int i = 0; i < nums.length; i++) {
            hashSet.add(nums[i]);
        }
        int longestStreak = 0;
        for (int num: nums) {
            if (!hashSet.contains(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (hashSet.contains(currentNum + 1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }
}

4.
5.
6.
