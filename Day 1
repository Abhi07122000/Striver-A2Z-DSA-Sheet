1: Set Matrix  Zeroes
class Solution {
    public void setZeroes(int[][] matrix) {
        int col0 = 1;
        int rows = matrix.length;
        int cols = matrix[0].length;

        for(int i = 0; i < rows; i++){
            if(matrix[i][0] == 0) col0 = 0;
            for(int j = 1; j < cols; j++){
                if(matrix[i][j]==0){
                    matrix[i][0] = matrix[0][j] = 0;
                }
            }
        }

        for(int i = rows-1 ; i >= 0; i--){
            for(int j = cols-1 ; j >= 1; j--){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
            if(col0 == 0) matrix[i][0] = 0;
        } 
         
    }
}

2. Pascal Triangle
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
				List<Integer> pre = null;
				for (int i = 0; i < numRows; i++) {
					List<Integer> row = new ArrayList<Integer>();
					for (int j = 0; j <= i; j++)
						if (j == 0 || j == i)
							row.add(1);
						else
						row.add(pre.get(j - 1) + pre.get(j));
					pre = row;
					res.add(row);
				}
			return res;
    }
}

3. Next Permutation
class Solution {
    /*
    1 3 5 4 2

    1: a[i] < a[i+1].                   //3 , i = 1
    2: a[j] > a[i].                     //4,  j = 3
    3: swap (a[i], a[j]).               // 1 4 5 3 2
    4: REVERSE(A, i + 1, len)           // 1 4 2 3 5
     */
    public void nextPermutation(int[] A) {
        if(A == null || A.length <= 1) return;
        int i = A.length - 2;
        while(i >= 0 && A[i] >= A[i + 1]) i--;   // 

        if(i >= 0) {                           
            int j = A.length - 1;              
            while(A[j] <= A[i]) j--;      
            swap(A, i, j);                     
        }
         
        reverse(A, i + 1, A.length - 1);   
    }

    public void swap(int[] A, int i, int j) {
        int tmp = A[i];
        A[i] = A[j];
        A[j] = tmp;
    }

    public void reverse(int[] A, int i, int j) {
        while(i < j) swap(A, i++, j--);
    }

}

4. Kadane's Algo
class Solution {
    public int maxSubArray(int[] nums) {
        int result = nums[0] , maxEnding = 0;
        for (int x : nums) {
            maxEnding = Math.max(x, maxEnding + x);
            result = Math.max(result,maxEnding);
        }
        return result;
    }
}


5. Sort an arrays of 0,1,2
class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;

        while(mid <= high) {
            if(nums[mid] == 0) {
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            }else if (nums[mid] == 1) {
                mid++;
            }else {
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }
}


6. Stock Buy and sell
class Solution {
    public int maxProfit(int[] prices) {
        int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        for(int i = 0; i < prices.length; i++) {
            minPrice = Math.min(minPrice, prices[i]);
            maxProfit = Math.max(maxProfit, prices[i] - minPrice);
        }
        return maxProfit;
    }
}
