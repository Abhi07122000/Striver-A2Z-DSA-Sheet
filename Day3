1.
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int i = 0, j = matrix[0].length - 1;
        while (i < matrix.length && j >= 0) {
            if(matrix[i][j] == target) {
                return true;
            }else if (matrix[i][j] > target) {
                j--;
            }else {
                i++;
            }
        }
        return false;
    }
}

2.
class Solution {
    public double myPow(double x, int n) {
        if (n == 0) return 1.0;
        if (n % 2 == 0) {
            return myPow(x * x , n / 2);
        }
        if (n % 2 == 1) {
            return x * myPow(x , n - 1);
        }
        // negative n
        return 1 / myPow(x, -n);
    }
}

3.
class Solution {
    public int majorityElement(int[] nums) {
        int res = 0, count = 1;
        for(int i = 0; i < nums.length; i++) {
            if(nums[res] == nums[i]) {
                count++;
            }else {
                count--;
            }
            if(count == 0) {
                res = i; 
                count = 1;
            }
        }
        int num = 0;
        for(int i : nums) {
            if(nums[res] == i) {
                num++;
            }
        }
        if (num > nums.length / 2) return nums[res];
        return -1;
    }
}

4.
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        HashMap<Integer, Integer> hs = new HashMap<>();
        List<Integer> ls = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            hs.put(nums[i], hs.getOrDefault(nums[i],0) + 1);
            if(hs.get(nums[i]) > (nums.length / 3)) {
                ls.add(nums[i]);
                hs.replace(nums[i] , Integer.MIN_VALUE);
            }
        }
        return ls;
    }
}

5.
class Solution {
    public int uniquePaths(int m, int n) {
        return count(m - 1, n - 1);
    }

    public int count(int i , int j) {
        if(i == 0 && j == 0) return 1;
        if(i < 0 || j < 0) return 0;
        return count(i - 1, j) + count(i, j - 1);
    }
}

6.
class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0 , nums.length-1);
    }
    private int mergeSort(int[] nums, int start, int end){
        if(start>=end)
            return 0;
        int mid = start + (end-start)/2;
        int reversePairs = 0;
        reversePairs += mergeSort(nums, start, mid);
        reversePairs += mergeSort(nums, mid+1, end);
        reversePairs += merge(nums, start, mid, end);
        return reversePairs;
    }
    
    private int merge(int[] nums, int start, int mid, int end){
        int n1 = mid - start + 1;
        int n2 = end - mid;
        long nums1[] = new long[n1+1];
        nums1[n1] = Long.MAX_VALUE;
        long nums2[] = new long[n2+1];
        nums2[n2] = Integer.MAX_VALUE;
        for(int i=0; i<n1; i++)
            nums1[i] = nums[i+start];
        for(int j=0; j<n2; j++)
            nums2[j] = nums[mid+1+j];
        
        // Here comes our logic to count pairs
        int count=0;
        int i=0, j=0;
        for(i=0; i<n1; i++){
            while(j<n2 && nums1[i]>(2*nums2[j])){
                j++;
            }
            count += j;
        }
        // Logic Ends
        
        i=0;
        j=0;
        // now, putting element in sorted array in original array
        for(int k=start; k<=end; k++){
            if(nums1[i]<=nums2[j]){
                nums[k] = (int)nums1[i++];
            } else {
                nums[k] = (int)nums2[j++];
            }
        }
        
        return count;
    }
}
